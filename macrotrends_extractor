#!/usr/bin/env python
# coding: utf-8

# In[1]:


import os
import re
import pandas as pd
import numpy as np
import time
import random
from tqdm import tqdm
import urllib.request, urllib.error, urllib.parse 
import requests


# In[2]:


headers_list = [
    # Firefox 77 Mac
    {
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:77.0) Gecko/20100101 Firefox/77.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Referer": "https://www.google.com/",
    "DNT": "1",
    "Connection": "keep-alive",
    "Upgrade-Insecure-Requests": "1"
    },
    # Chrome 92.0 Win10
    {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate, br",
    "Referer": "https://www.google.com/",
    "DNT": "1",
    "Connection": "keep-alive",
    "Upgrade-Insecure-Requests": "1"
    },
    # Chrome 91.0 Win10
    {
    "Connection": "keep-alive",
    "DNT": "1",
    "Upgrade-Insecure-Requests": "1",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    "Sec-Fetch-Site": "none",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-Dest": "document",
    "Referer": "https://www.google.com/",
    "Accept-Encoding": "gzip, deflate, br",
    "Accept-Language": "en-GB,en-US;q=0.9,en;q=0.8"
    },
    # Firefox 90.0 Win10
    {
    "Connection": "keep-alive",
    "Upgrade-Insecure-Requests": "1",
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
    "Sec-Fetch-Site": "same-origin",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-User": "?1",
    "Sec-Fetch-Dest": "document",
    "Referer": "https://www.google.com/",
    "Accept-Encoding": "gzip, deflate, br",
    "Accept-Language": "en-US,en;q=0.9"
    }
]


# In[3]:


def get_year_quarter(dates):
    year_quarters =[]
    for date in dates:
        year_quarter = "Q{}-{}".format(date.quarter,date.year)
        year_quarters.append(year_quarter)
    return year_quarters


# In[4]:


levis_url = 'https://www.macrotrends.net/stocks/charts/LEVI/levi-strauss/{}'
r = requests.Session()
headers = random.choice(headers_list)
r.headers = headers
profit_url = levis_url.format('gross-profit')
html = r.get(profit_url).text
dfs = pd.read_html(html)
df_profit_levis = dfs[1]
revenue_url = levis_url.format('revenue')
html = r.get(revenue_url).text
dfs = pd.read_html(html)
df_revenue_levis = dfs[1]


# In[5]:


gap_url = 'https://www.macrotrends.net/stocks/charts/GPS/gap/{}'
r = requests.Session()
headers = random.choice(headers_list)
r.headers = headers
profit_url = gap_url.format('gross-profit')
html = r.get(profit_url).text
dfs = pd.read_html(html)
df_profit_gap = dfs[1]
revenue_url = gap_url.format('revenue')
html = r.get(revenue_url).text
dfs = pd.read_html(html)
df_revenue_gap = dfs[1]


# In[6]:


df_profit_gap.columns = ['Date', 'Profit (in millions)']
df_revenue_gap.columns = ['Date', 'Revenue (in millions)']
df_profit_levis.columns = ['Date', 'Profit (in millions)']
df_revenue_levis.columns = ['Date', 'Revenue (in millions)']


# In[7]:


df_profit_gap['Date'] = pd.to_datetime(df_profit_gap['Date'])
df_revenue_gap['Date'] = pd.to_datetime(df_revenue_gap['Date'])
df_profit_levis['Date'] = pd.to_datetime(df_profit_levis['Date'])
df_revenue_levis['Date'] = pd.to_datetime(df_revenue_levis['Date'])


# In[8]:


dates = df_profit_gap['Date']
year_quarters = get_year_quarter(dates)
df_profit_gap['Year Quarter'] = year_quarters

dates = df_revenue_gap['Date']
year_quarters = get_year_quarter(dates)
df_revenue_gap['Year Quarter'] = year_quarters

dates = df_profit_levis['Date']
year_quarters = get_year_quarter(dates)
df_profit_levis['Year Quarter'] = year_quarters

dates = df_revenue_levis['Date']
year_quarters = get_year_quarter(dates)
df_revenue_levis['Year Quarter'] = year_quarters


# In[13]:


df_gap = df_profit_gap.merge(df_revenue_gap, how='inner', left_on=["Date", "Year Quarter"], right_on=["Date", "Year Quarter"])
df_levis = df_profit_levis.merge(df_revenue_levis, how='inner', left_on=["Date", "Year Quarter"], right_on=["Date", "Year Quarter"])


# In[19]:


df_gap.to_excel(os.path.join(os.getcwd(), 'gap-financials.xlsx'), index =False)
df_levis.to_excel(os.path.join(os.getcwd(), 'levis-financials.xlsx'), index =False)


# In[20]:


zara_url = 'https://www.macrotrends.net/stocks/charts/IDEXY/industria-de-diseno-textil-sa/{}'
r = requests.Session()
headers = random.choice(headers_list)
r.headers = headers
profit_url = zara_url.format('gross-profit')
html = r.get(profit_url).text
dfs = pd.read_html(html)
df_profit_zara = dfs[1]
revenue_url = zara_url.format('revenue')
html = r.get(revenue_url).text
dfs = pd.read_html(html)
df_revenue_zara = dfs[1]

df_profit_zara.columns = ['Date', 'Profit (in millions)']
df_revenue_zara.columns = ['Date', 'Revenue (in millions)']
df_profit_zara['Date'] = pd.to_datetime(df_profit_zara['Date'])
df_revenue_zara['Date'] = pd.to_datetime(df_revenue_zara['Date'])
dates = df_profit_zara['Date']
year_quarters = get_year_quarter(dates)
df_profit_zara['Year Quarter'] = year_quarters
dates = df_revenue_zara['Date']
year_quarters = get_year_quarter(dates)
df_revenue_zara['Year Quarter'] = year_quarters
df_zara = df_profit_zara.merge(df_revenue_zara, how='inner', left_on=["Date", "Year Quarter"], right_on=["Date", "Year Quarter"])


# In[22]:


df_zara.to_excel(os.path.join(os.getcwd(), 'zara-financials.xlsx'), index =False)


# In[23]:


hnm_url = 'https://www.macrotrends.net/stocks/charts/HNNMY/hennes-mauritz-ab/{}'
r = requests.Session()
headers = random.choice(headers_list)
r.headers = headers
profit_url = hnm_url.format('gross-profit')
html = r.get(profit_url).text
dfs = pd.read_html(html)
df_profit_hnm = dfs[1]
revenue_url = hnm_url.format('revenue')
html = r.get(revenue_url).text
dfs = pd.read_html(html)
df_revenue_hnm = dfs[1]

df_profit_hnm.columns = ['Date', 'Profit (in millions)']
df_revenue_hnm.columns = ['Date', 'Revenue (in millions)']
df_profit_hnm['Date'] = pd.to_datetime(df_profit_hnm['Date'])
df_revenue_hnm['Date'] = pd.to_datetime(df_revenue_hnm['Date'])
dates = df_profit_hnm['Date']
year_quarters = get_year_quarter(dates)
df_profit_hnm['Year Quarter'] = year_quarters
dates = df_revenue_hnm['Date']
year_quarters = get_year_quarter(dates)
df_revenue_hnm['Year Quarter'] = year_quarters
df_hnm = df_profit_hnm.merge(df_revenue_hnm, how='inner', left_on=["Date", "Year Quarter"], right_on=["Date", "Year Quarter"])


# In[24]:


df_hnm.to_excel(os.path.join(os.getcwd(), 'hnm-financials.xlsx'), index =False)


# In[ ]:




